pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./lib/Payload.tsol";
import "./lib/Constants.tsol";

import "./interfaces/IDexMiddleware.tsol";
import "./interfaces/IDexChildMiddleware.tsol";

import "./DexChildMiddleware.tsol";
import "./base/DexMiddlewareFlows.tsol";

import "broxus-ton-tokens-contracts/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/IAcceptTokensMintCallback.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/IAcceptTokensBurnCallback.tsol";



import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "broxus-ton-tokens-contracts/contracts/interfaces/ITokenWallet.tsol";
import "broxus-ton-tokens-contracts/contracts/abstract/TokenWalletDestroyableBase.tsol";
import "./lib/DexLibraries.tsol";

import "locklift/src/console.tsol";


contract DexMiddleware is
    IAcceptTokensTransferCallback,
    IAcceptTokensMintCallback,
    IAcceptTokensBurnCallback,
    DexMiddlewareFlows {

    constructor() public {
        require (tvm.pubkey() != 0, ErrorCodes.NOT_OWNER);
        require (tvm.pubkey() == msg.pubkey(), ErrorCodes.NOT_OWNER);
        tvm.accept();

        ITokenRoot(weverRoot).deployWallet{
                value: Constants.WEVER_WALLET_DEPLOY_VALUE,
                callback: DexMiddlewareBase.receiveTokenWalletAddress,
                bounce: false
        }(address(this), Constants.WEVER_WALLET_DEPLOY_GRAMS_VALUE);
    }

    function onAcceptTokensTransfer(
        address,
        uint128 _amount,
        address,
        address,
        address _remainingGasTo,
        TvmCell _payload
    ) override external {

        handleTokensTransfer(
            _amount,
            _remainingGasTo,
            _payload
        );
    }

    function onAcceptTokensMint(
        address,
        uint128 _amount,
        address _remainingGasTo,
        TvmCell _payload
    ) override external {
        handleTokensTransfer(
            _amount,
            _remainingGasTo,
            _payload
        );
    }

    function onAcceptTokensBurn(
        uint128 _amount,
        address,
        address,
        address _remainingGasTo,
        TvmCell payload
    ) override external {
        require(msg.sender == weverRoot, ErrorCodes.NOT_WEVER_ROOT);
        if (msg.sender == weverRoot) {
            handleWeverBurn(payload, _amount, _remainingGasTo);
            return;
        }

    }
    function calculateFeeAndTokensValue(TvmCell _transferPayload) override public pure returns (CommonStructures.CalculationResult) {
        (
            CommonStructures.PayloadForDex[] payloadsForDex,
            CommonStructures.PayloadForTransfer[] payloadsForTransfer,
            CommonStructures.PayloadForBurn[] payloadsForBurn,
            CommonStructures.PayloadForUnwrap[] payloadsForUnwrap,
            CommonStructures.TokensDistributionType tokensDistributionType,
            ,
        ) = Payload.decodePayload(_transferPayload);

        bool isAllTokensToSingleFlowType = tokensDistributionType == CommonStructures.TokensDistributionType.AllToSingleFlow;

        CommonStructures.CalculationResult calculationResult = _calculateFeeAndTokensValue(
            payloadsForDex,
            payloadsForTransfer,
            payloadsForBurn,
            payloadsForUnwrap
        );
        calculationResult.everValue +=
            uint128(payloadsForDex.length) * Constants.ADDITIONAL_EVER_VALUE +
            uint128(payloadsForTransfer.length) * Constants.ADDITIONAL_EVER_VALUE +
            uint128(payloadsForUnwrap.length) * Constants.ADDITIONAL_EVER_VALUE +
            uint128(payloadsForBurn.length) * Constants.ADDITIONAL_EVER_VALUE;

        return CommonStructures.CalculationResult({
            everValue: calculationResult.everValue,
            tokenAmount: isAllTokensToSingleFlowType ? 0 : calculationResult.tokenAmount,
            errorCode: calculationResult.errorCode
        });
    }
    function _calculateFeeAndTokensValue(
        CommonStructures.PayloadForDex[] _payloadsForDex,
        CommonStructures.PayloadForTransfer[] _payloadsForTransfer,
        CommonStructures.PayloadForBurn[] _payloadsForBurn,
        CommonStructures.PayloadForUnwrap[] _payloadsForUnwrap
    ) internal pure returns (CommonStructures.CalculationResult) {
        uint128 requiredValue;
        uint128 requiredTokenAmount;
        for (CommonStructures.PayloadForTransfer _transferConfig : _payloadsForTransfer) {
            requiredTokenAmount += _transferConfig.amount;
            requiredValue += (_transferConfig.attachedValue + _transferConfig.deployWalletValue);
        }

        for (CommonStructures.PayloadForBurn payloadForBurn : _payloadsForBurn) {

            if (payloadForBurn.attachedValue < Constants.MIN_ATTACHED_TO_BURN_VALUE) {
                return CommonStructures.CalculationResult({
                        everValue: 0,
                        tokenAmount: 0,
                        errorCode: CommonStructures.ValidationErrorCodes.AttachedValueToBurnToLow
                });
            }
            requiredValue += payloadForBurn.attachedValue;
            requiredTokenAmount += payloadForBurn.amount;
        }

        for (CommonStructures.PayloadForDex _dexConfig : _payloadsForDex) {
            requiredTokenAmount += _dexConfig.tokensAmount;

            uint256 deployWalletValue = math.min(
                _dexConfig.cancelPayload.deployWalletValue,
                _dexConfig.successPayload.deployWalletValue
            );
            if (deployWalletValue < Constants.DEPLOY_WALLET_VALUE) {
                return CommonStructures.CalculationResult({
                        everValue: 0,
                        tokenAmount: 0,
                        errorCode: CommonStructures.ValidationErrorCodes.DeployWalletValueToLow
                });
            }
            uint256 valueForFinalTransfer = math.min(
                _dexConfig.cancelPayload.valueForFinalTransfer,
                _dexConfig.successPayload.valueForFinalTransfer
            );

            if (valueForFinalTransfer < Constants.DEPLOY_WALLET_VALUE * 2) {
                return CommonStructures.CalculationResult({
                        everValue: 0,
                        tokenAmount: 0,
                        errorCode: CommonStructures.ValidationErrorCodes.ValueForFinalTransferToLow
                });
            }

            requiredValue += getTotalValueForDexOperation(_dexConfig);
        }

        for (CommonStructures.PayloadForUnwrap unwrapConfig : _payloadsForUnwrap) {
            requiredValue += Constants.UNWRAP_TRANSACTION_VALUE;
            requiredTokenAmount += unwrapConfig.amount;
        }

        return CommonStructures.CalculationResult({
            everValue: requiredValue,
            tokenAmount: requiredTokenAmount,
            errorCode: CommonStructures.ValidationErrorCodes.None
        });
    }



    function checkIsEnoughValueAndTokens(
        CommonStructures.PayloadForDex[] _payloadsForDex,
        CommonStructures.PayloadForTransfer[] _payloadsForTransfer,
        CommonStructures.PayloadForBurn[] _payloadsForBurn,
        CommonStructures.PayloadForUnwrap[] _payloadsForUnwrap,
        bool _isAllTokensToSingleFlow,
        uint128 _receivedTokensAmount
    ) internal pure returns(CommonStructures.ValidationErrorCodes, uint128) {

        // Type `AllToSingleFlow` supports only one flow at a single time
        if (_isAllTokensToSingleFlow) {
            uint256 totalFlows = _payloadsForDex.length +
                _payloadsForTransfer.length +
                _payloadsForBurn.length +
                _payloadsForUnwrap.length;
            if (totalFlows != 1) {
                return (CommonStructures.ValidationErrorCodes.OnlyOneOperationAllowed, 0);
            }
        }

        CommonStructures.CalculationResult calculationResult = _calculateFeeAndTokensValue(
            _payloadsForDex,
            _payloadsForTransfer,
            _payloadsForBurn,
            _payloadsForUnwrap
        );

        if (calculationResult.errorCode != CommonStructures.ValidationErrorCodes.None) {
            return (calculationResult.errorCode, 0);
        }

        if (msg.value < calculationResult.everValue) {
            return (CommonStructures.ValidationErrorCodes.TotalEverValueToLow, 0);
        }

        if (_isAllTokensToSingleFlow) {
            return (CommonStructures.ValidationErrorCodes.None, 0);
        }

        if (_receivedTokensAmount < calculationResult.tokenAmount) {
            return (CommonStructures.ValidationErrorCodes.TotalTokensValueToLow, 0);
        }

        return (
            CommonStructures.ValidationErrorCodes.None,
            _receivedTokensAmount - calculationResult.tokenAmount
        );
    }

    function handleTokensTransfer(
        uint128 _amount,
        address _tokensTransferRemainingGasTo,
        TvmCell _payload
    ) internal {
        tvm.rawReserve(_reserve(), 0);

        (
            CommonStructures.PayloadForDex[] payloadsForDex,
            CommonStructures.PayloadForTransfer[] payloadsForTransfer,
            CommonStructures.PayloadForBurn[] payloadsForBurn,
            CommonStructures.PayloadForUnwrap[] payloadsForUnwrap,
            CommonStructures.TokensDistributionType tokensDistributionType,
            address remainingTokensTo,
            address payloadRemainingGasTo
        ) = Payload.decodePayload(_payload);

        address remainingGasTo = payloadRemainingGasTo.value == 0 ?
            _tokensTransferRemainingGasTo :
            payloadRemainingGasTo;

        bool isAllTokensToSingleFlowType = tokensDistributionType == CommonStructures.TokensDistributionType.AllToSingleFlow;

        (
            CommonStructures.ValidationErrorCodes validationError,
            uint128 extraTokensAmount
        ) = checkIsEnoughValueAndTokens(
            payloadsForDex,
            payloadsForTransfer,
            payloadsForBurn,
            payloadsForUnwrap,
            isAllTokensToSingleFlowType,
            _amount
        );

        if (validationError != CommonStructures.ValidationErrorCodes.None || isPaused) {

            ITokenWallet(msg.sender).transfer{value: 0, flag:MsgFlag.ALL_NOT_RESERVED, bounce: false}(
                _amount,
                remainingTokensTo,
                0,
                remainingGasTo,
                true,
                _payload
            );
            return;
        }

        if (extraTokensAmount > 0) {
            ITokenWallet(msg.sender).transfer{value: Constants.EXTRA_TOKENS_TRANSFER_VALUE, bounce: false}(
                extraTokensAmount,
                remainingTokensTo,
                0,
                remainingGasTo,
                true,
                _payload
            );
        }

        optional(uint128) tokensAmount;
        if (isAllTokensToSingleFlowType) {
            tokensAmount = _amount;
        }
        makeTransfers(payloadsForTransfer, tokensAmount);
        makeBurns(payloadsForBurn, tokensAmount);
        createChildProcesses(payloadsForDex, tokensAmount);
        makeUnwraps(payloadsForUnwrap, tokensAmount);

        remainingGasTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
    }



    function upgrade(TvmCell _newCode, uint32 _newVersion, address _sendGaTo) onlyOwner override external {
        if (dexMiddlewareVersion == _newVersion) {
            tvm.rawReserve(_reserve(), 0);
            _sendGaTo.transfer({value: 0, flag: MsgFlag.ALL_NOT_RESERVED, bounce: false});
            return;
        }

        TvmCell data = abi.encode(
            nonce, // uint128
            owner, // address
            _newVersion, // uint32
            dexMiddlewareChildCode, // TvmCell
            isPaused, // bool
            currentChildNonce, // uint128
            childVersion // uint32
        );

        tvm.setcode(_newCode);
        tvm.setCurrentCode(_newCode);

        onCodeUpgrade(data);

    }

    function onCodeUpgrade(TvmCell _upgradeData) private {}

}
