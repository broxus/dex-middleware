pragma ever-solidity >=0.62.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./CommonStructures.tsol";

library Payload {
    struct DecodedPayload {
        CommonStructures.PayloadForDex[] payloadsForDex;
        CommonStructures.PayloadForTransfer[] payloadsForTransfers;
        CommonStructures.PayloadForBurn[] payloadForBurn;
        CommonStructures.PayloadForUnwrap[] payloadForUnwrap;
        CommonStructures.TokensDistributionType tokensDistributionType;
        address remainingTokensTo;
        address remainingGasTo;
    }
    function buildPayload(
        CommonStructures.PayloadForDex[] _payloadsForDex,
        CommonStructures.PayloadForTransfer[] _payloadsForTransfers,
        CommonStructures.PayloadForBurn[] _payloadForBurn,
        CommonStructures.PayloadForUnwrap[] _payloadForUnwrap,
        CommonStructures.TokensDistributionType _tokensDistributionType,
        address _remainingTokensTo,
        address _remainingGasTo
    ) public  returns(TvmCell) {
        TvmBuilder b;
        b.store(
            _payloadsForDex,
            _payloadsForTransfers,
            _payloadForBurn,
            _payloadForUnwrap,
            _tokensDistributionType,
            _remainingTokensTo,
            _remainingGasTo
        );
        return b.toCell();
    }


    function decodePayload(TvmCell _payload) public returns (
        CommonStructures.PayloadForDex[],
        CommonStructures.PayloadForTransfer[],
        CommonStructures.PayloadForBurn[],
        CommonStructures.PayloadForUnwrap[],
        CommonStructures.TokensDistributionType,
        address,
        address
    ) {
        return _payload.toSlice().decode(
            CommonStructures.PayloadForDex[],
            CommonStructures.PayloadForTransfer[],
            CommonStructures.PayloadForBurn[],
            CommonStructures.PayloadForUnwrap[],
            CommonStructures.TokensDistributionType,
            address,
            address
        );
    }

    function decodePayloadSave(TvmCell _payload) internal returns (
        optional(
            CommonStructures.PayloadForDex[],
            CommonStructures.PayloadForTransfer[],
            CommonStructures.PayloadForBurn[],
            CommonStructures.PayloadForUnwrap[],
            CommonStructures.TokensDistributionType,
            address,
            address
        )
    ) {
        return _payload.toSlice().decodeQ(
                CommonStructures.PayloadForDex[],
                CommonStructures.PayloadForTransfer[],
                CommonStructures.PayloadForBurn[],
                CommonStructures.PayloadForUnwrap[],
                CommonStructures.TokensDistributionType,
                address,
                address
        );
    }
}
